///
/// @Generated by Mockolo
///



import Combine
import CoreBluetooth
import Foundation
import SwiftUI


class CentralManagerMock: CentralManager {
    init() { }
    init(delegate: CBCentralManagerDelegate? = nil, isScanning: Bool = false, state: CBManagerState) {
        self.delegate = delegate
        self.isScanning = isScanning
        self._state = state
    }


    private(set) var delegateSetCallCount = 0
    var delegate: CBCentralManagerDelegate? = nil { didSet { delegateSetCallCount += 1 } }

    private(set) var isScanningSetCallCount = 0
    var isScanning: Bool = false { didSet { isScanningSetCallCount += 1 } }

    private(set) var stateSetCallCount = 0
    private var _state: CBManagerState!  { didSet { stateSetCallCount += 1 } }
    var state: CBManagerState {
        get { return _state }
        set { _state = newValue }
    }

    private(set) var scanForPeripheralsCallCount = 0
    var scanForPeripheralsHandler: (([CBUUID]?, [String: Any]?) -> ())?
    func scanForPeripherals(withServices serviceUUIDs: [CBUUID]?, options: [String: Any]?)  {
        scanForPeripheralsCallCount += 1
        if let scanForPeripheralsHandler = scanForPeripheralsHandler {
            scanForPeripheralsHandler(serviceUUIDs, options)
        }
        
    }

    private(set) var stopScanCallCount = 0
    var stopScanHandler: (() -> ())?
    func stopScan()  {
        stopScanCallCount += 1
        if let stopScanHandler = stopScanHandler {
            stopScanHandler()
        }
        
    }

    private(set) var retrievePeripheralsCallCount = 0
    var retrievePeripheralsHandler: (([UUID]) -> ([Peripheral]))?
    func retrievePeripherals(withIdentifiers: [UUID]) -> [Peripheral] {
        retrievePeripheralsCallCount += 1
        if let retrievePeripheralsHandler = retrievePeripheralsHandler {
            return retrievePeripheralsHandler(withIdentifiers)
        }
        return [Peripheral]()
    }

    private(set) var connectCallCount = 0
    var connectHandler: ((Peripheral, [String: Any]?) -> ())?
    func connect(_ peripheral: Peripheral, options: [String: Any]?)  {
        connectCallCount += 1
        if let connectHandler = connectHandler {
            connectHandler(peripheral, options)
        }
        
    }

    private(set) var cancelPeripheralConnectionCallCount = 0
    var cancelPeripheralConnectionHandler: ((Peripheral) -> ())?
    func cancelPeripheralConnection(_ identifier: Peripheral)  {
        cancelPeripheralConnectionCallCount += 1
        if let cancelPeripheralConnectionHandler = cancelPeripheralConnectionHandler {
            cancelPeripheralConnectionHandler(identifier)
        }
        
    }
}

class PeripheralMock: Peripheral {
    init() { }
    init(name: String? = nil, identifier: UUID = UUID(), delegate: CBPeripheralDelegate? = nil, services: [CBService]? = nil) {
        self.name = name
        self.identifier = identifier
        self.delegate = delegate
        self.services = services
    }


    private(set) var nameSetCallCount = 0
    var name: String? = nil { didSet { nameSetCallCount += 1 } }

    private(set) var identifierSetCallCount = 0
    var identifier: UUID = UUID() { didSet { identifierSetCallCount += 1 } }

    private(set) var delegateSetCallCount = 0
    var delegate: CBPeripheralDelegate? = nil { didSet { delegateSetCallCount += 1 } }

    private(set) var servicesSetCallCount = 0
    var services: [CBService]? = nil { didSet { servicesSetCallCount += 1 } }

    private(set) var discoverServicesCallCount = 0
    var discoverServicesHandler: (([CBUUID]?) -> ())?
    func discoverServices(_ serviceUUIDs: [CBUUID]?)  {
        discoverServicesCallCount += 1
        if let discoverServicesHandler = discoverServicesHandler {
            discoverServicesHandler(serviceUUIDs)
        }
        
    }

    private(set) var discoverCharacteristicsCallCount = 0
    var discoverCharacteristicsHandler: (([CBUUID]?, CBService) -> ())?
    func discoverCharacteristics(_ _arg: [CBUUID]?, for service: CBService)  {
        discoverCharacteristicsCallCount += 1
        if let discoverCharacteristicsHandler = discoverCharacteristicsHandler {
            discoverCharacteristicsHandler(_arg, service)
        }
        
    }

    private(set) var setNotifyValueCallCount = 0
    var setNotifyValueHandler: ((Bool, CBCharacteristic) -> ())?
    func setNotifyValue(_ _arg: Bool, for: CBCharacteristic)  {
        setNotifyValueCallCount += 1
        if let setNotifyValueHandler = setNotifyValueHandler {
            setNotifyValueHandler(_arg, `for`)
        }
        
    }
}

